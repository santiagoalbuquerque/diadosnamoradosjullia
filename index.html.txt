<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Quiz do Dia dos Namorados</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f7e9e9; /* Um rosa claro para o tema dos namorados */
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            margin: 0;
            padding: 20px;
            box-sizing: border-box;
            overflow: hidden; /* Evita scroll na animação de fundo */
            position: relative;
        }

        /* Estilos para corações flutuantes */
        .heart-container {
            position: absolute;
            width: 100%;
            height: 100%;
            top: 0;
            left: 0;
            pointer-events: none;
            overflow: hidden;
        }

        .heart {
            position: absolute;
            background-color: #ff69b4; /* Rosa choque */
            transform: rotate(-45deg);
            animation: floatHeart 10s infinite ease-in;
            opacity: 0;
        }

        .heart::before,
        .heart::after {
            content: '';
            position: absolute;
            width: 100%;
            height: 100%;
            background-color: #ff69b4;
            border-radius: 50%;
        }

        .heart::before {
            top: -50%;
            left: 0;
        }

        .heart::after {
            top: 0;
            left: 50%;
        }

        @keyframes floatHeart {
            0% {
                transform: translateY(100vh) rotate(-45deg) scale(0);
                opacity: 0;
            }
            20% {
                opacity: 1;
                transform: translateY(80vh) rotate(-45deg) scale(0.8);
            }
            80% {
                opacity: 1;
                transform: translateY(20vh) rotate(-45deg) scale(1.2);
            }
            100% {
                transform: translateY(-20vh) rotate(-45deg) scale(1.5);
                opacity: 0;
            }
        }

        .quiz-container {
            background-color: #ffffff;
            border-radius: 20px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            padding: 40px;
            max-width: 600px;
            width: 100%;
            text-align: center;
            position: relative;
            z-index: 10; /* Garante que o quiz fique acima dos corações */
            display: flex;
            flex-direction: column;
            gap: 20px;
            animation: fadeIn 1s ease-out;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .question-text {
            font-size: 1.75rem; /* Maior para destaque */
            font-weight: 700;
            color: #4a0033; /* Roxo escuro para contraste */
            margin-bottom: 20px;
        }

        .options-container {
            display: flex;
            flex-direction: column;
            gap: 15px;
            margin-top: 20px;
        }

        .option-button {
            background-color: #ffb6c1; /* Rosa claro */
            color: #8b0000; /* Vermelho escuro */
            padding: 15px 20px;
            border-radius: 10px;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            border: 2px solid #ff69b4; /* Borda rosa choque */
            text-align: left;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        .option-button:hover {
            background-color: #ff69b4; /* Rosa choque no hover */
            color: #ffffff;
            transform: translateY(-3px);
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
        }

        .option-button.correct {
            background-color: #a8e6cf; /* Verde claro para acerto */
            border-color: #00b386; /* Verde escuro */
            color: #00664f;
        }

        .option-button.wrong {
            background-color: #ffadad; /* Vermelho claro para erro */
            border-color: #ff0000; /* Vermelho escuro */
            color: #8b0000;
        }

        .feedback-message {
            margin-top: 20px;
            font-size: 1.1rem;
            font-weight: 600;
        }

        .feedback-message.correct {
            color: #28a745; /* Verde para sucesso */
        }

        .feedback-message.wrong {
            color: #dc3545; /* Vermelho para erro */
        }

        .text-input {
            width: calc(100% - 40px); /* Ajusta a largura com padding */
            padding: 15px;
            border-radius: 10px;
            border: 2px solid #ff69b4;
            font-size: 1.1rem;
            margin-top: 20px;
            box-sizing: border-box; /* Inclui padding na largura */
        }

        .submit-button {
            background-color: #ff69b4;
            color: #ffffff;
            padding: 15px 30px;
            border-radius: 10px;
            font-size: 1.2rem;
            font-weight: 700;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-top: 20px;
            border: none;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        .submit-button:hover {
            background-color: #e04b90;
            transform: translateY(-3px);
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
        }

        .final-screen {
            background-color: #ffffff;
            border-radius: 20px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            padding: 40px;
            max-width: 700px; /* Maior para a imagem */
            width: 100%;
            text-align: center;
            position: relative;
            z-index: 10;
            display: flex;
            flex-direction: column;
            gap: 20px;
            animation: fadeIn 1s ease-out;
            justify-content: center;
            align-items: center;
        }

        .final-screen img {
            max-width: 100%;
            height: auto;
            border-radius: 15px;
            margin-top: 20px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
            border: 5px solid #ff69b4; /* Borda da foto */
        }

        .present-message {
            font-size: 1.8rem;
            font-weight: 700;
            color: #4a0033;
            margin-top: 30px;
            line-height: 1.4;
        }

        .audio-controls {
            margin-top: 20px;
        }

        .audio-controls button {
            background-color: #ff69b4;
            color: white;
            padding: 10px 20px;
            border-radius: 8px;
            font-size: 1rem;
            cursor: pointer;
            transition: background-color 0.3s ease;
            border: none;
        }

        .audio-controls button:hover {
            background-color: #e04b90;
        }

        /* Estilo para a mensagem de erro (modal) */
        .message-box-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.6);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
            opacity: 0;
            visibility: hidden;
            transition: opacity 0.3s ease, visibility 0.3s ease;
        }

        .message-box-overlay.visible {
            opacity: 1;
            visibility: visible;
        }

        .message-box-content {
            background-color: white;
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
            text-align: center;
            max-width: 400px;
            width: 90%;
            transform: scale(0.9);
            transition: transform 0.3s ease;
        }

        .message-box-overlay.visible .message-box-content {
            transform: scale(1);
        }

        .message-box-content h3 {
            color: #4a0033;
            margin-bottom: 15px;
            font-size: 1.5rem;
        }

        .message-box-content p {
            color: #333;
            margin-bottom: 25px;
            font-size: 1rem;
        }

        .message-box-content button {
            background-color: #ff69b4;
            color: white;
            padding: 10px 25px;
            border-radius: 8px;
            font-size: 1.1rem;
            cursor: pointer;
            transition: background-color 0.3s ease;
            border: none;
        }

        .message-box-content button:hover {
            background-color: #e04b90;
        }

        /* Os estilos llm-output-container e loading-spinner foram mantidos por segurança, mas não serão usados */
        .llm-output-container {
            margin-top: 20px;
            background-color: #fff0f5; /* Rosa bem clarinho */
            padding: 20px;
            border-radius: 10px;
            border: 1px dashed #ff69b4;
            font-size: 1.1rem;
            color: #6a004f;
            min-height: 50px;
            display: flex;
            justify-content: center;
            align-items: center;
            text-align: center;
            word-wrap: break-word; /* Garante que o texto quebre */
            white-space: pre-wrap; /* Preserva quebras de linha do LLM */
        }
        .loading-spinner {
            border: 4px solid #f3f3f3; /* Light grey */
            border-top: 4px solid #ff69b4; /* Pink */
            border-radius: 50%;
            width: 24px;
            height: 24px;
            animation: spin 1s linear infinite;
            margin: 0 auto;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <div class="heart-container"></div>

    <div id="quiz-start-screen" class="quiz-container">
        <h2 class="question-text">Bem-vinda, Jullia! Prepare-se, você achou que seria fácil receber seu presente? vamos testar sua memória!</h2>
        <p class="text-gray-700">Vamos ver o quanto você conhece o nosso amor, lembre-se: matematicamente o limite para o nosso amor é infinito! 😉</p>
        <button id="start-quiz-button" class="submit-button">Começar o Quiz!</button>
        <div class="audio-controls">
            <button id="play-music-button">Tocar Música</button>
            <button id="pause-music-button" style="display: none;">Pausar Música</button>
        </div>
    </div>

    <div id="quiz-container" class="quiz-container hidden">
        <h2 id="question" class="question-text"></h2>
        <div id="options" class="options-container">
            <!-- Opções serão carregadas aqui -->
        </div>
        <input type="text" id="text-answer" class="text-input hidden" placeholder="Digite sua resposta...">
        <button id="submit-answer" class="submit-button hidden">Responder</button>
        <p id="feedback" class="feedback-message"></p>
    </div>

    <div id="final-screen" class="final-screen hidden">
        <h2 class="text-3xl font-bold text-pink-700">Parabéns, amor! Você acertou tudo! 🎉</h2>
        <!-- Caminho da imagem atualizado para o nome do arquivo local -->
        <img src="eaf7df31-a77b-4968-87ab-7cb534c6252a.jpg" alt="Santiago e Jullia" class="rounded-lg shadow-lg" onerror="this.onerror=null;this.src='https://placehold.co/700x400/cccccc/333333?text=Imagem+Nao+Disponivel';">
        
        <p class="present-message mt-8">
            Seu presente está te esperando... <br>
            Vá até o <span class="font-bold text-red-600">vintão</span> para descobrir! 😉
        </p>
    </div>

    <!-- Message Box Overlay -->
    <div id="message-box-overlay" class="message-box-overlay">
        <div class="message-box-content">
            <h3 id="message-box-title"></h3>
            <p id="message-box-text"></p>
            <button id="message-box-close-button">Fechar</button>
        </div>
    </div>

    <audio id="background-music" loop>
        <!-- Caminho da música atualizado para o nome do arquivo local -->
        <source src="mechamandodepaixao.mp3" type="audio/mpeg">
        Seu navegador não suporta o elemento de áudio.
    </audio>

    <script>
        const quizStartScreen = document.getElementById('quiz-start-screen');
        const startQuizButton = document.getElementById('start-quiz-button');
        const quizContainer = document.getElementById('quiz-container');
        const questionElement = document.getElementById('question');
        const optionsContainer = document.getElementById('options');
        const textAnswerInput = document.getElementById('text-answer');
        const submitAnswerButton = document.getElementById('submit-answer');
        const feedbackMessage = document.getElementById('feedback');
        const finalScreen = document.getElementById('final-screen');
        const backgroundMusic = document.getElementById('background-music');
        const playMusicButton = document.getElementById('play-music-button');
        const pauseMusicButton = document.getElementById('pause-music-button');

        const messageBoxOverlay = document.getElementById('message-box-overlay');
        const messageBoxTitle = document.getElementById('message-box-title');
        const messageBoxText = document.getElementById('message-box-text');
        const messageBoxCloseButton = document.getElementById('message-box-close-button');

        let currentQuestionIndex = 0;
        let attemptsLeft = 3;

        // Função para mostrar a caixa de mensagem personalizada
        function showMessageBox(title, message) {
            messageBoxTitle.textContent = title;
            messageBoxText.textContent = message;
            messageBoxOverlay.classList.add('visible');
        }

        // Função para esconder a caixa de mensagem personalizada
        function hideMessageBox() {
            messageBoxOverlay.classList.remove('visible');
        }

        // Event listener para fechar a caixa de mensagem
        messageBoxCloseButton.addEventListener('click', hideMessageBox);
        messageBoxOverlay.addEventListener('click', (e) => {
            if (e.target === messageBoxOverlay) {
                hideMessageBox();
            }
        });

        // Perguntas do quiz
        const questions = [
            {
                question: "Qual nossa música favorita?",
                type: "multiple-choice",
                options: {
                    a: "Hotel Zona Sul - Bk",
                    b: "Me chamando de Paixão - Jorge Ben",
                    c: "Seu - Sant",
                    d: "Só por hoje - Luccas Carlos"
                },
                correctAnswer: "b"
            },
            {
                question: "Qual nosso filme/série favorito?",
                type: "multiple-choice",
                options: {
                    a: "Pecadores",
                    b: "Estrela além do tempo",
                    c: "Machos Alfa",
                    d: "Ainda estou aqui"
                },
                correctAnswer: "a"
            },
            {
                question: "Qual nosso passatempo favorito?",
                type: "multiple-choice",
                options: {
                    a: "Dormir",
                    b: "Ver série",
                    c: "Comer",
                    d: "Academia"
                },
                correctAnswer: "c"
            },
            {
                question: "Qual é a nossa praia preferida?",
                type: "multiple-choice",
                options: {
                    a: "Copacabana",
                    b: "Paraty",
                    c: "Praia do Sossego",
                    d: "Itaipu"
                },
                correctAnswer: "b"
            },
            {
                question: "Quanto o Santiago te ama?",
                type: "text",
                correctAnswer: "infinito",
                hint: "Pense no limite do nosso amor... É um conceito matemático!", // Dica após 3 tentativas
                keyword: "eternidade" // Palavra-chave, caso ela precise de mais uma ajuda
            }
        ];

        // Função para carregar a pergunta atual
        function loadQuestion() {
            const currentQuestion = questions[currentQuestionIndex];
            questionElement.textContent = currentQuestion.question;
            feedbackMessage.textContent = ""; // Limpa feedback anterior

            // Esconde ambos os tipos de input/opções
            optionsContainer.classList.add('hidden');
            textAnswerInput.classList.add('hidden');
            submitAnswerButton.classList.add('hidden');
            optionsContainer.innerHTML = ''; // Limpa opções anteriores

            if (currentQuestion.type === "multiple-choice") {
                optionsContainer.classList.remove('hidden');
                for (const key in currentQuestion.options) {
                    const button = document.createElement('button');
                    button.classList.add('option-button');
                    button.textContent = `${key.toUpperCase()}) ${currentQuestion.options[key]}`;
                    button.dataset.answer = key;
                    button.addEventListener('click', handleMultipleChoiceAnswer);
                    optionsContainer.appendChild(button);
                }
            } else if (currentQuestion.type === "text") {
                textAnswerInput.value = ""; // Limpa o input de texto
                textAnswerInput.classList.remove('hidden');
                submitAnswerButton.classList.remove('hidden');
                attemptsLeft = 3; // Reseta tentativas para a pergunta de texto
            }
        }

        // Handler para respostas de múltipla escolha
        function handleMultipleChoiceAnswer(event) {
            const selectedAnswer = event.target.dataset.answer;
            const currentQuestion = questions[currentQuestionIndex];
            const allOptionButtons = optionsContainer.querySelectorAll('.option-button');

            // Desabilita todos os botões após a seleção (para evitar múltiplos cliques na mesma pergunta)
            allOptionButtons.forEach(button => {
                button.removeEventListener('click', handleMultipleChoiceAnswer);
                button.disabled = true;
            });

            if (selectedAnswer === currentQuestion.correctAnswer) {
                event.target.classList.add('correct');
                showMessageBox("Acertou!", "Boa, meu amor! Você acertou! ❤️");
                setTimeout(nextQuestion, 1500); // Avança após 1.5 segundos
            } else {
                event.target.classList.add('wrong');
                showMessageBox("Ops!", "Melhore amor, você errou! 😔");
                // Habilita os botões novamente e remove as classes de feedback para tentar de novo
                setTimeout(() => {
                    allOptionButtons.forEach(button => {
                        button.classList.remove('correct', 'wrong'); // Remove ambas as classes de feedback
                        button.addEventListener('click', handleMultipleChoiceAnswer);
                        button.disabled = false;
                    });
                }, 1500); // Dar um tempo para ler a mensagem antes de reabilitar
            }
        }

        // Handler para respostas de texto
        submitAnswerButton.addEventListener('click', () => {
            const userAnswer = textAnswerInput.value.trim().toLowerCase();
            const currentQuestion = questions[currentQuestionIndex];

            if (userAnswer === currentQuestion.correctAnswer) {
                showMessageBox("Acertou!", "Isso! Meu amor por você é *infinito*! ❤️");
                setTimeout(nextQuestion, 1500);
            } else {
                attemptsLeft--;
                if (attemptsLeft > 0) {
                    showMessageBox("Tente de Novo!", `Essa não é a resposta, Você tem mais ${attemptsLeft} tentativa(s).`);
                    if (attemptsLeft === 1 && currentQuestion.hint) {
                         showMessageBox("Última Chance!", `Essa não é a resposta, Você tem mais ${attemptsLeft} tentativa(s). Dica: ${currentQuestion.hint}`);
                    }
                } else {
                    // Após 3 tentativas, revele a dica/palavra-chave e avance
                    showMessageBox("Não foi dessa vez...", `Ah, meu amor... A resposta correta era "${currentQuestion.correctAnswer}".`);
                    setTimeout(nextQuestion, 2000); // Avança automaticamente
                }
            }
        });

        // Avança para a próxima pergunta ou tela final
        function nextQuestion() {
            currentQuestionIndex++;
            if (currentQuestionIndex < questions.length) {
                loadQuestion();
            } else {
                showFinalScreen();
            }
        }

        // Mostra a tela final
        function showFinalScreen() {
            quizContainer.classList.add('hidden');
            finalScreen.classList.remove('hidden');
            backgroundMusic.pause(); // Pausa a música no final
            updateAudioButtons(); // Atualiza os botões de audio para o estado de pausado
        }

        // Animação de corações flutuantes
        function createHeart() {
            const heart = document.createElement('div');
            heart.classList.add('heart');
            document.querySelector('.heart-container').appendChild(heart);

            heart.style.width = `${Math.random() * 20 + 10}px`; /* Tamanho entre 10 e 30px */
            heart.style.height = heart.style.width;
            heart.style.left = `${Math.random() * 100}vw`; /* Posição aleatória na largura */
            heart.style.animationDuration = `${Math.random() * 5 + 5}s`; /* Duração entre 5 e 10s */
            heart.style.animationDelay = `-${Math.random() * 5}s`; /* Atraso para iniciar em posições diferentes */

            setTimeout(() => {
                heart.remove();
            }, parseFloat(heart.style.animationDuration) * 1000);
        }

        // Inicia a criação de corações
        setInterval(createHeart, 300);

        // Função para atualizar os botões de áudio com base no estado real do áudio
        function updateAudioButtons() {
            if (!backgroundMusic.paused) {
                playMusicButton.style.display = 'none';
                pauseMusicButton.style.display = 'inline-block';
            } else {
                playMusicButton.style.display = 'inline-block';
                pauseMusicButton.style.display = 'none';
            }
        }

        // Event listeners para o estado de reprodução do áudio
        backgroundMusic.onplaying = () => {
            updateAudioButtons();
        };
        backgroundMusic.onpause = () => {
            updateAudioButtons();
        };

        // Controles de áudio
        playMusicButton.addEventListener('click', () => {
            // Tenta tocar a música e lida com possíveis erros de autoplay
            backgroundMusic.play()
                .then(() => {
                    updateAudioButtons();
                })
                .catch(e => {
                    console.error("Erro ao tocar música:", e);
                    // Se o erro for relacionado a autoplay, informa ao usuário
                    if (e.name === 'NotAllowedError' || e.name === 'AbortError') {
                        showMessageBox("Música Bloqueada", "Seu navegador pode ter bloqueado a reprodução automática da música. Por favor, clique em 'Tocar Música' manualmente se desejar.");
                    } else {
                        showMessageBox("Erro na Música", "Ocorreu um problema ao tocar a música. Tente novamente ou verifique sua conexão.");
                    }
                    updateAudioButtons(); // Garante que os botões se ajustem mesmo com erro
                });
        });

        pauseMusicButton.addEventListener('click', () => {
            if (!backgroundMusic.paused) { // Só pausa se estiver tocando
                backgroundMusic.pause();
                updateAudioButtons();
            }
        });

        // Iniciar o quiz quando o botão for clicado
        startQuizButton.addEventListener('click', () => {
            quizStartScreen.classList.add('hidden');
            quizContainer.classList.remove('hidden');
            loadQuestion();
            // Tenta tocar a música quando o quiz começa
            backgroundMusic.play()
                .then(() => {
                    updateAudioButtons();
                })
                .catch(e => {
                    console.error("Erro ao tocar música no início do quiz:", e);
                    if (e.name === 'NotAllowedError' || e.name === 'AbortError') {
                        showMessageBox("Música Bloqueada", "Seu navegador pode ter bloqueado a reprodução automática da música. Por favor, clique em 'Tocar Música' no topo da página se desejar.");
                    }
                    updateAudioButtons(); // Garante que os botões se ajustem mesmo com erro
                });
        });

        // Chamada inicial para definir o estado correto dos botões ao carregar a página
        updateAudioButtons();
    </script>
</body>
</html>
